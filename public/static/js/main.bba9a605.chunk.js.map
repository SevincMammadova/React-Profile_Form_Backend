{"version":3,"sources":["components/input/Input.jsx","components/paragraph/Paraghraph.jsx","components/ProfileForm/ProfileForm.jsx","REST.js","components/WelcomePage/WelcomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","this","props","type","id","name","className","placeholder","value","onClick","onChange","React","Component","Paraghraph","children","ProfileForm","inputChangeHandler","e","target","setState","prevState","inputValues","checkFormHandler","preventDefault","console","log","state","data","xhr","XMLHttpRequest","dataInJson","JSON","stringify","open","setRequestHeader","send","sendPostRequest","action","method","onSubmit","WelcomePage","changeModal","isShow","isShowModal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bba9a605.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../input/input.css'\r\n\r\nclass Input extends React.Component{\r\n   \r\n    render() {\r\n        const {\r\n            type,\r\n            id,\r\n            name,\r\n            className,\r\n            placeholder,\r\n            value,\r\n            onClick,\r\n            onChange,\r\n        } = this.props;\r\n\r\n        return(\r\n            <input\r\n                type = {type}\r\n                id = {id}\r\n                name = {name}\r\n                className = {className}\r\n                placeholder = {placeholder}\r\n                value = {value}\r\n                onClick = {onClick}\r\n                onChange = {onChange}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport '../paragraph/paraghraph.css'\r\n\r\nclass Paraghraph extends React.Component {\r\n    \r\n    render () {\r\n        const {\r\n            className,\r\n            id,\r\n            children\r\n        } = this.props\r\n\r\n        return (\r\n            <p \r\n            className = {className}\r\n            id = {id}>\r\n                {children}\r\n            </p>\r\n        )\r\n    }\r\n}\r\nexport default Paraghraph;","import React from 'react'\r\nimport '../ProfileForm/profileForm.css'\r\nimport Input from '../input/Input'\r\nimport Paraghraph from '../paragraph/Paraghraph'\r\nimport {sendPostRequest} from '../../REST'\r\n\r\nclass ProfileForm extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputValues : {}\r\n  }\r\n  }\r\n\r\n  inputChangeHandler = (e) => {\r\n\r\n    const {name, value} = e.target;\r\n\r\n    this.setState(prevState => ({\r\n        inputValues : {\r\n        ...prevState.inputValues,\r\n        [name] : value\r\n    }\r\n    }));\r\n  }\r\n\r\n  checkFormHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log( this.state.inputValues );\r\n\r\n    sendPostRequest(this.state.inputValues)\r\n\r\n\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"container-profile_form\">\r\n        <form className=\"profile_form\" action='' method='post' onSubmit={this.checkFormHandler}>\r\n\r\n          <h1 className = 'profile_form-header'>PROVIDE YOUR CREDITIONALS</h1>\r\n          <Paraghraph className=\"userInfo\" id=\"fullName\">\r\n            Full Name:\r\n          </Paraghraph>\r\n          <Input \r\n            type = {'text'}\r\n            className = {'userInfoInput'}\r\n            name = {'name'}\r\n            id = {'fullNameInput'}\r\n            placeholder = {'Enter your full name...'}\r\n            onChange = {this.inputChangeHandler}\r\n          />\r\n          <Paraghraph className=\"userInfo\" id=\"age\">\r\n            Age:\r\n          </Paraghraph>\r\n          <Input \r\n            type = {'number'}\r\n            name = {'age'}\r\n            className = {'userInfoInput'}\r\n            id = {'ageInput'}\r\n            placeholder = {'Enter your age...'}\r\n            onChange = {this.inputChangeHandler}\r\n          />\r\n          <Paraghraph className=\"userInfo\" id=\"email\">\r\n            Email:\r\n          </Paraghraph>\r\n          <Input \r\n            type = {'email'}\r\n            className = {'userInfoInput'}\r\n            name = {'email'}\r\n            id = {'emailInput'}\r\n            placeholder = {'Enter your email...'}\r\n            onChange = {this.inputChangeHandler}\r\n          />\r\n          <Paraghraph className=\"userInfo\" id=\"phone\">\r\n            Phone:\r\n          </Paraghraph>\r\n          <Input \r\n            type = {'tel'}\r\n            name = {'phone'}\r\n            className = {'userInfoInput'}\r\n            id = {'phoneInput'}\r\n            placeholder = {'Enter your phone number...'}\r\n            onChange = {this.inputChangeHandler}\r\n          />\r\n    \r\n          <button  type = {'submit'} className = {'registrate_button'} id = {'registrate_button'}> Registrate</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProfileForm;","export const sendPostRequest = data => {\r\n    let xhr = new XMLHttpRequest();\r\n    let dataInJson = JSON.stringify(data);\r\n\r\n    xhr.open(\"POST\", \"/add-obj\");\r\n    xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n    xhr.send(dataInJson);\r\n}\r\n","import React from 'react';\r\nimport '../WelcomePage/welcomePage.css'\r\nimport Input from '../input/Input'\r\nimport ProfileForm from '../ProfileForm/ProfileForm';\r\n\r\n\r\nclass WelcomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isShowModal: false,\r\n        }\r\n    }\r\n\r\n    changeModal = isShow => {\r\n        this.setState({isShowModal:isShow})\r\n    }\r\n  \r\n    render() {\r\n        const { changeModal } = this;\r\n        const { isShowModal } = this.state;\r\n        return(\r\n            <>\r\n                { isShowModal ? (<ProfileForm/>) :\r\n                    <div className=\"welcome_page-container\">\r\n                       <h1 className=\"welcomePage-header\">Welcome to our Team</h1>\r\n                        <Input\r\n                        type = {'submit'}\r\n                        className = {'submit_button'}\r\n                        id = {'submit_button'}\r\n                        value = {'Click me'}\r\n                        onClick = {changeModal}\r\n                        />\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default WelcomePage;","import React from 'react';\r\nimport WelcomePage from './components/WelcomePage/WelcomePage'\r\n\r\nfunction App() {\r\n   return (\r\n     <div>\r\n       <WelcomePage/>\r\n     </div>\r\n     \r\n   )\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}